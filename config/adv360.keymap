/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td_mt: td_mt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MT";
            #binding-cells = <0>;
            bindings = <&lt 2 LEFT_SHIFT>, <&kp LG(SPACE)>;

            tapping-term-ms = <120>;
        };

        ht_meh: ht_meh {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MEH";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tp_ctrl_mo: tp_ctrl_mo {
            compatible = "zmk,behavior-tap-dance";
            label = "TP_CTRL_MO";
            #binding-cells = <0>;
            bindings = <&kp LEFT_CONTROL>, <&mo 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL    &kp N1    &kp N2     &kp N3    &kp N4     &kp N5  &tog 1                                                       &mo 3      &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB      &kp Q     &kp W      &kp E     &kp R      &kp T   &none                                                        &none      &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC      &kp A     &kp S      &kp D     &kp F      &kp G   &none     &kp LCTRL  &kp LEFT_GUI      &kp LALT   &kp RCTRL  &none      &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT    &kp Z     &kp X      &kp C     &kp V      &kp B                        &kp HOME          &kp PG_UP                        &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
&tp_ctrl_mo  &kp CAPS  &kp GRAVE  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END           &kp PG_DN  &kp ENTER  &kp SPACE          &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &kp RCMD
            >;
        };

        layer_keypad {
            bindings = <
&kp EQUAL  &kp N1    &kp N2     &kp N3    &kp N4     &kp N5  &trans                                                   &mo 3      &kp N6    &kp N7  &kp N8    &kp N9            &kp N0     &kp MINUS
&kp TAB    &kp A     &kp Z      &kp F     &kp P      &kp B   &kp AT                                                   &none      &kp J     &kp L   &kp U     &kp Y             &kp COMMA  &kp BSLH
&kp ESC    &kp Q     &kp R      &kp S     &kp T      &kp G   &none     &kp LCTRL  &kp LGUI      &kp LALT   &kp RCTRL  &none      &kp SEMI  &kp N   &kp E     &kp I             &kp O      &kp SQT
&kp LSHFT  &kp W     &kp X      &kp C     &kp D      &kp V                        &kp HOME      &kp PG_UP                        &kp K     &kp H   &kp M     &kp PERIOD        &kp FSLH   &kp RSHFT
&mo 2      &kp CAPS  &kp GRAVE  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp SPACE            &kp UP  &kp DOWN  &kp LEFT_BRACKET  &kp RBKT   &kp RGUI
            >;
        };

        layer_fn {
            bindings = <
&kp F1          &kp F2  &kp F3  &kp F4              &kp F5               &kp F6             &tog 1                                                           &mo 3   &kp F7  &kp F8             &kp F9              &kp F10            &kp F11               &kp F12
&trans          &trans  &trans  &trans              &kp LS(LA(LC(R)))    &kp LS(LA(LC(T)))  &trans                                                           &none   &trans  &kp LS(LA(LC(U)))  &kp LS(LA(LC(I)))   &trans             &trans                &trans
&trans          &trans  &trans  &trans              &kp LS(LC(LA(F)))    &kp LS(LA(LC(G)))  &none     &trans  &kp RS(RA(N5))      &kp RS(RA(MINUS))  &trans  &none   &trans  &kp LS(LA(LC(J)))  &kp LS(LA(LC(K)))   &kp LS(LA(LC(L)))  &kp LS(LA(LC(SEMI)))  &trans
&kp LEFT_SHIFT  &trans  &trans  &trans              &trans               &trans                               &kp RA(N5)          &kp RA(MINUS)                      &trans  &trans             &trans              &kp RS(RA(L))      &trans                &kp RIGHT_SHIFT
&trans          &trans  &trans  &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)                     &kp LCMD  &trans  &kp N5              &kp MINUS          &trans  &trans          &kp LA(UP_ARROW)   &kp LA(DOWN_ARROW)  &trans             &trans                &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
